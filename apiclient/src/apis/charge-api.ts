/* tslint:disable */
/* eslint-disable */
/**
 * 抄表系统 - Pda抄表
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { PdaCustDetailsDtoListResultDto } from '../models';
import { PdaCustDetailsInput } from '../models';
import { PdaMeterBookDtoListResultDto } from '../models';
import { PdaMeterReaderDto } from '../models';
import { PdaReadDataDtoListResultDto } from '../models';
import { ReadDataByBookIdsInput } from '../models';
/**
 * ChargeApi - axios parameter creator
 * @export
 */
export const ChargeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据抄表员工号获取应抄册本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeBookListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/charge/bookList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新抄表员登录密码
         * @param {string} currentPassword 当前密码
         * @param {string} newPassword 新密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeChangePasswordPut: async (currentPassword: string, newPassword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'currentPassword' is not null or undefined
            if (currentPassword === null || currentPassword === undefined) {
                throw new RequiredError('currentPassword','Required parameter currentPassword was null or undefined when calling apiAppChargeChangePasswordPut.');
            }
            // verify required parameter 'newPassword' is not null or undefined
            if (newPassword === null || newPassword === undefined) {
                throw new RequiredError('newPassword','Required parameter newPassword was null or undefined when calling apiAppChargeChangePasswordPut.');
            }
            const localVarPath = `/api/app/charge/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (currentPassword !== undefined) {
                localVarQueryParameter['currentPassword'] = currentPassword;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据客户编号获取客户详细信息
         * @param {PdaCustDetailsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeCustDetailsByCustIdPost: async (body: PdaCustDetailsInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAppChargeCustDetailsByCustIdPost.');
            }
            const localVarPath = `/api/app/charge/custDetailsByCustId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据设备编号下载抄表数据
         * @param {ReadDataByBookIdsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeReadDataByBookIdsPost: async (body: ReadDataByBookIdsInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAppChargeReadDataByBookIdsPost.');
            }
            const localVarPath = `/api/app/charge/readDataByBookIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取抄表员基础信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeUserInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/charge/userInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新抄表员用户名、手机号码  若只修改其中一个，另一个为空即可
         * @param {string} [name] 用户名
         * @param {string} [phoneNumber] 电话号码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeUserPut: async (name?: string, phoneNumber?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/charge/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChargeApi - functional programming interface
 * @export
 */
export const ChargeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据抄表员工号获取应抄册本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeBookListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaMeterBookDtoListResultDto>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeBookListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新抄表员登录密码
         * @param {string} currentPassword 当前密码
         * @param {string} newPassword 新密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeChangePasswordPut(currentPassword: string, newPassword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeChangePasswordPut(currentPassword, newPassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据客户编号获取客户详细信息
         * @param {PdaCustDetailsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeCustDetailsByCustIdPost(body: PdaCustDetailsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaCustDetailsDtoListResultDto>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeCustDetailsByCustIdPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据设备编号下载抄表数据
         * @param {ReadDataByBookIdsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeReadDataByBookIdsPost(body: ReadDataByBookIdsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaReadDataDtoListResultDto>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeReadDataByBookIdsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取抄表员基础信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeUserInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaMeterReaderDto>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeUserInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新抄表员用户名、手机号码  若只修改其中一个，另一个为空即可
         * @param {string} [name] 用户名
         * @param {string} [phoneNumber] 电话号码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppChargeUserPut(name?: string, phoneNumber?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChargeApiAxiosParamCreator(configuration).apiAppChargeUserPut(name, phoneNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChargeApi - factory interface
 * @export
 */
export const ChargeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 根据抄表员工号获取应抄册本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeBookListGet(options?: any): AxiosPromise<PdaMeterBookDtoListResultDto> {
            return ChargeApiFp(configuration).apiAppChargeBookListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新抄表员登录密码
         * @param {string} currentPassword 当前密码
         * @param {string} newPassword 新密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeChangePasswordPut(currentPassword: string, newPassword: string, options?: any): AxiosPromise<void> {
            return ChargeApiFp(configuration).apiAppChargeChangePasswordPut(currentPassword, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据客户编号获取客户详细信息
         * @param {PdaCustDetailsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeCustDetailsByCustIdPost(body: PdaCustDetailsInput, options?: any): AxiosPromise<PdaCustDetailsDtoListResultDto> {
            return ChargeApiFp(configuration).apiAppChargeCustDetailsByCustIdPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据设备编号下载抄表数据
         * @param {ReadDataByBookIdsInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeReadDataByBookIdsPost(body: ReadDataByBookIdsInput, options?: any): AxiosPromise<PdaReadDataDtoListResultDto> {
            return ChargeApiFp(configuration).apiAppChargeReadDataByBookIdsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取抄表员基础信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeUserInfoGet(options?: any): AxiosPromise<PdaMeterReaderDto> {
            return ChargeApiFp(configuration).apiAppChargeUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新抄表员用户名、手机号码  若只修改其中一个，另一个为空即可
         * @param {string} [name] 用户名
         * @param {string} [phoneNumber] 电话号码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppChargeUserPut(name?: string, phoneNumber?: string, options?: any): AxiosPromise<void> {
            return ChargeApiFp(configuration).apiAppChargeUserPut(name, phoneNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChargeApi - object-oriented interface
 * @export
 * @class ChargeApi
 * @extends {BaseAPI}
 */
export class ChargeApi extends BaseAPI {
    /**
     * 
     * @summary 根据抄表员工号获取应抄册本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeBookListGet(options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeBookListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新抄表员登录密码
     * @param {string} currentPassword 当前密码
     * @param {string} newPassword 新密码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeChangePasswordPut(currentPassword: string, newPassword: string, options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeChangePasswordPut(currentPassword, newPassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据客户编号获取客户详细信息
     * @param {PdaCustDetailsInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeCustDetailsByCustIdPost(body: PdaCustDetailsInput, options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeCustDetailsByCustIdPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据设备编号下载抄表数据
     * @param {ReadDataByBookIdsInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeReadDataByBookIdsPost(body: ReadDataByBookIdsInput, options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeReadDataByBookIdsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取抄表员基础信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeUserInfoGet(options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新抄表员用户名、手机号码  若只修改其中一个，另一个为空即可
     * @param {string} [name] 用户名
     * @param {string} [phoneNumber] 电话号码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargeApi
     */
    public apiAppChargeUserPut(name?: string, phoneNumber?: string, options?: any) {
        return ChargeApiFp(this.configuration).apiAppChargeUserPut(name, phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
