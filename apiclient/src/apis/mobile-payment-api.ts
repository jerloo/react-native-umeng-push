/* tslint:disable */
/* eslint-disable */
/**
 * 抄表系统 - Pda抄表
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { MeterReaderDtoListResultDto } from '../models';
import { PdaChargeListDtoListResultDto } from '../models';
import { PdaPaySubtotalsDto } from '../models';
import { PdaPaymentCollectDto } from '../models';
import { PdaPaymentCollectInput } from '../models';
import { PdaPaymentInput } from '../models';
/**
 * MobilePaymentApi - axios parameter creator
 * @export
 */
export const MobilePaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 收费统计
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentGetPaymentCollectPost: async (body: PdaPaymentCollectInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAppMobilePaymentGetPaymentCollectPost.');
            }
            const localVarPath = `/api/app/mobilePayment/getPaymentCollect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 收费明细
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentGetPaymentSubtotalPost: async (body: PdaPaymentCollectInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAppMobilePaymentGetPaymentSubtotalPost.');
            }
            const localVarPath = `/api/app/mobilePayment/getPaymentSubtotal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 支付宝收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByAlipayPost: async (custCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'custCode' is not null or undefined
            if (custCode === null || custCode === undefined) {
                throw new RequiredError('custCode','Required parameter custCode was null or undefined when calling apiAppMobilePaymentPaymentByAlipayPost.');
            }
            const localVarPath = `/api/app/mobilePayment/paymentByAlipay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (custCode !== undefined) {
                localVarQueryParameter['custCode'] = custCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 现金收费
         * @param {PdaPaymentInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByCashPost: async (body: PdaPaymentInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAppMobilePaymentPaymentByCashPost.');
            }
            const localVarPath = `/api/app/mobilePayment/paymentByCash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 微信收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByWeChatPost: async (custCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'custCode' is not null or undefined
            if (custCode === null || custCode === undefined) {
                throw new RequiredError('custCode','Required parameter custCode was null or undefined when calling apiAppMobilePaymentPaymentByWeChatPost.');
            }
            const localVarPath = `/api/app/mobilePayment/paymentByWeChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (custCode !== undefined) {
                localVarQueryParameter['custCode'] = custCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 收费详情
         * @param {number} subtotalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentDetailsSubtotalIdGet: async (subtotalId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subtotalId' is not null or undefined
            if (subtotalId === null || subtotalId === undefined) {
                throw new RequiredError('subtotalId','Required parameter subtotalId was null or undefined when calling apiAppMobilePaymentPaymentDetailsSubtotalIdGet.');
            }
            const localVarPath = `/api/app/mobilePayment/paymentDetails/{subtotalId}`
                .replace(`{${"subtotalId"}}`, encodeURIComponent(String(subtotalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询全部Pda收费员
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPdaUserGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/mobilePayment/pdaUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MobilePaymentApi - functional programming interface
 * @export
 */
export const MobilePaymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 收费统计
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentGetPaymentCollectPost(body: PdaPaymentCollectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaPaymentCollectDto>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentGetPaymentCollectPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 收费明细
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentGetPaymentSubtotalPost(body: PdaPaymentCollectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaPaySubtotalsDto>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentGetPaymentSubtotalPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 支付宝收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentPaymentByAlipayPost(custCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentPaymentByAlipayPost(custCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 现金收费
         * @param {PdaPaymentInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentPaymentByCashPost(body: PdaPaymentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentPaymentByCashPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 微信收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentPaymentByWeChatPost(custCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentPaymentByWeChatPost(custCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 收费详情
         * @param {number} subtotalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdaChargeListDtoListResultDto>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询全部Pda收费员
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMobilePaymentPdaUserGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeterReaderDtoListResultDto>> {
            const localVarAxiosArgs = await MobilePaymentApiAxiosParamCreator(configuration).apiAppMobilePaymentPdaUserGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MobilePaymentApi - factory interface
 * @export
 */
export const MobilePaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 收费统计
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentGetPaymentCollectPost(body: PdaPaymentCollectInput, options?: any): AxiosPromise<PdaPaymentCollectDto> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentGetPaymentCollectPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 收费明细
         * @param {PdaPaymentCollectInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentGetPaymentSubtotalPost(body: PdaPaymentCollectInput, options?: any): AxiosPromise<PdaPaySubtotalsDto> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentGetPaymentSubtotalPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 支付宝收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByAlipayPost(custCode: string, options?: any): AxiosPromise<string> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentPaymentByAlipayPost(custCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 现金收费
         * @param {PdaPaymentInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByCashPost(body: PdaPaymentInput, options?: any): AxiosPromise<void> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentPaymentByCashPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 微信收费
         * @param {string} custCode 客户编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentByWeChatPost(custCode: string, options?: any): AxiosPromise<string> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentPaymentByWeChatPost(custCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 收费详情
         * @param {number} subtotalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId: number, options?: any): AxiosPromise<PdaChargeListDtoListResultDto> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询全部Pda收费员
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMobilePaymentPdaUserGet(options?: any): AxiosPromise<MeterReaderDtoListResultDto> {
            return MobilePaymentApiFp(configuration).apiAppMobilePaymentPdaUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MobilePaymentApi - object-oriented interface
 * @export
 * @class MobilePaymentApi
 * @extends {BaseAPI}
 */
export class MobilePaymentApi extends BaseAPI {
    /**
     * 
     * @summary 收费统计
     * @param {PdaPaymentCollectInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentGetPaymentCollectPost(body: PdaPaymentCollectInput, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentGetPaymentCollectPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 收费明细
     * @param {PdaPaymentCollectInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentGetPaymentSubtotalPost(body: PdaPaymentCollectInput, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentGetPaymentSubtotalPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 支付宝收费
     * @param {string} custCode 客户编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentPaymentByAlipayPost(custCode: string, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentPaymentByAlipayPost(custCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 现金收费
     * @param {PdaPaymentInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentPaymentByCashPost(body: PdaPaymentInput, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentPaymentByCashPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 微信收费
     * @param {string} custCode 客户编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentPaymentByWeChatPost(custCode: string, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentPaymentByWeChatPost(custCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 收费详情
     * @param {number} subtotalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId: number, options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentPaymentDetailsSubtotalIdGet(subtotalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查询全部Pda收费员
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilePaymentApi
     */
    public apiAppMobilePaymentPdaUserGet(options?: any) {
        return MobilePaymentApiFp(this.configuration).apiAppMobilePaymentPdaUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}
